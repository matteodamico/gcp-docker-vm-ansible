- name: Create VMs
  hosts:  local
  gather_facts: no
  connection: local
  vars:
      gcp_project: "{{ lookup('env','GCP_PROJECT') }}"
      gcp_cred_kind: "{{ lookup('env','GCP_AUTH_KIND') }}"
      gcp_cred_file: "{{ lookup('env','GCP_SERVICE_ACCOUNT_FILE') }}"
      zone: "{{ lookup('env','GCP_ZONE') }}"
      region: "{{ lookup('env','GCP_REGION') }}"
      scope: "{{ lookup('env','GCP_SCOPES') }}"
  tasks:
 # - name: create a network
 #   gcp_compute_network:
 #    name: ansible-network
 #     auto_create_subnetworks: yes
 #     project: "{{ gcp_project }}"
 #     auth_kind: "{{ gcp_cred_kind }}"
 #     service_account_file: "{{ gcp_cred_file }}"
 #     state: present
 #     scopes:
 #       - "{{ scope }}"
 #   register: network

  - name: create a disk
    gcp_compute_disk:
      name: disk-instance
      size_gb: 50
      source_image: projects/centos-cloud/global/images/centos-7-v20200811
      zone: "{{ zone }}"
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
#     service_account_file: "{{ gcp_cred_file }}"
      state: present
      scopes:
        - "{{ scope }}"
    register: disk
  
  - name: create a disk2
    gcp_compute_disk:
      name: disk-instance2
      size_gb: 50
      source_image: projects/centos-cloud/global/images/centos-7-v20200811
      zone: "{{ zone }}"
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
#      service_account_file: "{{ gcp_cred_file }}"
      state: present
      scopes:
        - "{{ scope }}"
    register: disk2

  - name: create a address
    gcp_compute_address:
      name: address-instance
      region: "{{ region }}"
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
 #     service_account_file: "{{ gcp_cred_file }}"
      state: present
      scopes:
        - "{{ scope }}"
    register: address

  - name: Print address
    debug: 
      msg: "{{ address.address }}"

  - name: create a instance
    gcp_compute_instance:
      name: instance1
      machine_type: n1-standard-1  #or e2-small 
      disks:
      - auto_delete: 'true'
        boot: 'true'
        source: "{{ disk }}"
      network_interfaces:
        - network: null
          access_configs:
          - name: External NAT
            nat_ip: "{{ address }}"
            type: ONE_TO_ONE_NAT
      zone: "{{ zone }}"
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
      service_account_file: "{{ gcp_cred_file }}"
      scopes:
           - "{{ scope }}"
      state: present
        
#  - name: Wait for SSH to come up
#    wait_for: host={{ address.address }} port=22 delay=10 timeout=60
    
  - name: Add host to groupname
    add_host: hostname={{ address.address }} groupname=new_instances

    
  - name: create a address2
    gcp_compute_address:
      name: address-instance2
      region: "{{ region }}"
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
 #     service_account_file: "{{ gcp_cred_file }}"
      state: present
      scopes:
        - "{{ scope }}"
    register: address2
    
  - name: create second instance
    gcp_compute_instance:
      name: instance2
      machine_type: n1-standard-1 #oppure e2-small 
      disks:
      - auto_delete: 'true'
        boot: 'true'
        source: "{{ disk2 }}"
      network_interfaces:
        - access_configs:
          - name: External NAT
            nat_ip: "{{ address2 }}"
            type: ONE_TO_ONE_NAT
      zone: "{{ zone }}"
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
      service_account_file: "{{ gcp_cred_file }}"
      scopes:
           - "{{ scope }}"
      state: present

   

#  - name: Wait for SSH to come up
#    wait_for: host={{ address2.address }} port=22 delay=10 timeout=60
    
  - name: Add host to groupname
    add_host: hostname={{ address2.address }} groupname=new_instances


- name: "Configure app server(s)"
  hosts: "new_instances"
  become: True
  roles:
    - { role: "nickjj.user", tags: "user" }


#- name: Docker installation - not running on CentOS due also to apt/yum
#  hosts: "new_instances"
#  become: true
#  roles:
#    - role: "nickjj.docker"
#      tags: ["docker"]


- name: Docker installation
  hosts: "new_instances"
  user: docker
  become: yes
  tasks:
    - name: "Installing Docker Prerequisite packages"
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
    - name: "Configuring docker-ce repo"
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        mode: 0644
    - name: "Installing Docker latest version"
      yum:
        name: docker-ce
        state: present
    - name: "Starting and Enabling Docker service"
      service:
        name: docker
        state: started
        enabled: yes     